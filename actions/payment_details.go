package actions

import (
	"assessment/models"
	"assessment/utils"
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (PaymentDetail)
// DB Table: Plural (payment_details)
// Resource: Plural (PaymentDetails)
// Path: Plural (/payment_details)
// View Template Folder: Plural (/templates/payment_details/)

// PaymentDetailsResource is the resource for the PaymentDetail model
type PaymentDetailsResource struct {
	buffalo.Resource
}

// List gets all PaymentDetails. This function is mapped to the path
// GET /payment_details
func (v PaymentDetailsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	user, err := GetUser(c)
	if err != nil {
		response := utils.ResponseUtils[string]{
			Status:  http.StatusUnauthorized,
			Message: "User not logged in",
		}
		return c.Render(http.StatusUnauthorized, r.JSON(response))
	}

	paymentDetails := &models.PaymentDetails{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all PaymentDetails from the DB
	if err := q.Where("created_by = ?", user.ID).All(paymentDetails); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("paymentDetails", paymentDetails)
		return c.Render(http.StatusOK, r.HTML("payment_details/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		response := utils.ResponseUtils[models.PaymentDetails]{
			Status:  http.StatusOK,
			Message: "Payment details retrieved successfully",
			Data:    paymentDetails,
		}
		return c.Render(200, r.JSON(response))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(paymentDetails))
	}).Respond(c)
}

// Show gets the data for one PaymentDetail. This function is mapped to
// the path GET /payment_details/{payment_detail_id}
func (v PaymentDetailsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	user, _ := GetUser(c)

	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty PaymentDetail
	paymentDetail := &models.PaymentDetail{}

	// To find the PaymentDetail the parameter payment_detail_id is used.
	if err := tx.Where("created_by = ?", &user.ID).Find(paymentDetail, c.Param("payment_detail_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("paymentDetail", paymentDetail)

		return c.Render(http.StatusOK, r.HTML("payment_details/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(paymentDetail))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(paymentDetail))
	}).Respond(c)
}

// Create adds a PaymentDetail to the DB. This function is mapped to the
// path POST /payment_details
func (v PaymentDetailsResource) Create(c buffalo.Context) error {
	// Allocate an empty PaymentDetail

	paymentDetail := &models.PaymentDetail{}

	user, err := GetUser(c)
	if err != nil {
		response := utils.ResponseUtils[string]{
			Status:  http.StatusUnauthorized,
			Message: "User not logged in",
		}
		return c.Render(http.StatusUnauthorized, r.JSON(response))
	}

	paymentDetail.CreatedByID = user.ID

	// Bind paymentDetail to the html form elements
	if err := c.Bind(paymentDetail); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(paymentDetail)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("paymentDetail", paymentDetail)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("payment_details/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "paymentDetail.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/payment_details/%v", paymentDetail.ID)
	}).Wants("json", func(c buffalo.Context) error {
		response := utils.ResponseUtils[models.PaymentDetail]{
			Status:  http.StatusCreated,
			Message: "Payment detail created successfully",
			Data:    paymentDetail,
		}
		return c.Render(http.StatusCreated, r.JSON(response))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(paymentDetail))
	}).Respond(c)
}

// Update changes a PaymentDetail in the DB. This function is mapped to
// the path PUT /payment_details/{payment_detail_id}
func (v PaymentDetailsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty PaymentDetail
	paymentDetail := &models.PaymentDetail{}

	if err := tx.Find(paymentDetail, c.Param("payment_detail_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind PaymentDetail to the html form elements
	if err := c.Bind(paymentDetail); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(paymentDetail)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("paymentDetail", paymentDetail)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("payment_details/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "paymentDetail.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/payment_details/%v", paymentDetail.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(paymentDetail))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(paymentDetail))
	}).Respond(c)
}

// Destroy deletes a PaymentDetail from the DB. This function is mapped
// to the path DELETE /payment_details/{payment_detail_id}
func (v PaymentDetailsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty PaymentDetail
	paymentDetail := &models.PaymentDetail{}

	// To find the PaymentDetail the parameter payment_detail_id is used.
	if err := tx.Find(paymentDetail, c.Param("payment_detail_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(paymentDetail); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "paymentDetail.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/payment_details")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(paymentDetail))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(paymentDetail))
	}).Respond(c)
}
