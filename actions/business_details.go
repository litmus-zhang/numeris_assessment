package actions

import (
	"assessment/models"
	"assessment/utils"
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (BusinessDetail)
// DB Table: Plural (business_details)
// Resource: Plural (BusinessDetails)
// Path: Plural (/business_details)
// View Template Folder: Plural (/templates/business_details/)

// BusinessDetailsResource is the resource for the BusinessDetail model
type BusinessDetailsResource struct {
	buffalo.Resource
}

// List gets all BusinessDetails. This function is mapped to the path
// GET /business_details
func (v BusinessDetailsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context

	user, err := GetUser(c)
	if err != nil {
		response := utils.ResponseUtils[string]{
			Status:  http.StatusUnauthorized,
			Message: "User not logged in",
		}
		return c.Render(http.StatusUnauthorized, r.JSON(response))
	}
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}
	businessDetails := &models.BusinessDetails{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all BusinessDetails from the DB
	if err := q.Where("created_by = ?", &user.ID).All(businessDetails); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("businessDetails", businessDetails)
		return c.Render(http.StatusOK, r.HTML("business_details/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		response := utils.ResponseUtils[models.BusinessDetails]{
			Status:  http.StatusOK,
			Message: "Business details retrieved successfully",
			Data:    businessDetails,
		}
		return c.Render(200, r.JSON(response))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(businessDetails))
	}).Respond(c)
}

// Show gets the data for one BusinessDetail. This function is mapped to
// the path GET /business_details/{business_detail_id}
func (v BusinessDetailsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty BusinessDetail
	businessDetail := &models.BusinessDetail{}

	// To find the BusinessDetail the parameter business_detail_id is used.
	if err := tx.Find(businessDetail, c.Param("business_detail_id")); err != nil {

		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("businessDetail", businessDetail)

		return c.Render(http.StatusOK, r.HTML("business_details/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		response := utils.ResponseUtils[models.BusinessDetail]{
			Status:  http.StatusOK,
			Message: "Business details retrieved successfully",
			Data:    businessDetail,
		}
		return c.Render(200, r.JSON(response))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(businessDetail))
	}).Respond(c)
}

// Create adds a BusinessDetail to the DB. This function is mapped to the
// path POST /business_details
func (v BusinessDetailsResource) Create(c buffalo.Context) error {
	// Allocate an empty BusinessDetail
	businessDetail := &models.BusinessDetail{}
	// Get the current user

	user, err := GetUser(c)
	if err != nil {
		response := utils.ResponseUtils[string]{
			Status:  http.StatusUnauthorized,
			Message: "User not logged in",
		}
		return c.Render(http.StatusUnauthorized, r.JSON(response))
	}
	businessDetail.CreatedBy = *user
	// Set the user_id of the businessDetail to the current user

	// Bind businessDetail to the html form elements
	if err := c.Bind(businessDetail); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(businessDetail)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("businessDetail", businessDetail)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("business_details/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "businessDetail.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/business_details/%v", businessDetail.ID)
	}).Wants("json", func(c buffalo.Context) error {
		response := utils.ResponseUtils[models.BusinessDetail]{
			Data:    businessDetail,
			Status:  http.StatusCreated,
			Message: "Business details created successfully",
		}
		return c.Render(http.StatusCreated, r.JSON(response))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(businessDetail))
	}).Respond(c)
}

// Update changes a BusinessDetail in the DB. This function is mapped to
// the path PUT /business_details/{business_detail_id}
func (v BusinessDetailsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty BusinessDetail
	businessDetail := &models.BusinessDetail{}

	if err := tx.Find(businessDetail, c.Param("business_detail_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind BusinessDetail to the html form elements
	if err := c.Bind(businessDetail); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(businessDetail)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("businessDetail", businessDetail)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("business_details/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "businessDetail.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/business_details/%v", businessDetail.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(businessDetail))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(businessDetail))
	}).Respond(c)
}

// Destroy deletes a BusinessDetail from the DB. This function is mapped
// to the path DELETE /business_details/{business_detail_id}
func (v BusinessDetailsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty BusinessDetail
	businessDetail := &models.BusinessDetail{}

	// To find the BusinessDetail the parameter business_detail_id is used.
	if err := tx.Find(businessDetail, c.Param("business_detail_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(businessDetail); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "businessDetail.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/business_details")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(businessDetail))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(businessDetail))
	}).Respond(c)
}
